1. 存储基于磁盘，按页的方式进行管理。
2. 缓冲池
  1. 读取：会先读取缓冲池，若缓冲池命中则直接返回，否则读取磁盘，并存储在缓冲池。
  2. 修改：先修改缓冲池中的页，再已一定的频率刷新到磁盘，通过CheckPoint机制刷新到磁盘。
  3. 缓冲池大小是可设定的
  4. 缓冲池中存储内容：
    - 索引页
    - 数据页
    - undo页
    - 插入缓冲（insert buffer）
    - 自适应哈希索引
    - InnoDB存储的锁信息
    - 数据字典
3. LRU List
  1. 缓冲池是通过LRU List(Latest Recent Used,最近最少使用)进行管理
  2. 最频繁访问的页在LRU列表前端，最少使用在末端，当缓冲池不够用时，释放末端数据。
  3. 为了避免全表扫描时完全替换LRU列表，InnoDB的LRU列表中还加入了midpoint位置，所有新读取到的数据存放在LRU列表5/8位置。
4. Flush List
  1. 数据被修改后存放在Flush列表中，成为脏页，通过CHECKPOINT机制刷新回磁盘。
5. Checkpoint技术
  1. 当前事务数据库都采用体积事务时，先写重做日志（redo log_buffer），再修改页。
  2. ACID中的D（Durability持久性）就是靠此实现。
  3. Checkpoint解决的问题
    1. 缩短数据库恢复时间（减少redo log中未刷新到磁盘的量）
    2. 缓冲池不够用时，刷新脏页到磁盘
    3. 重做日志不可用时（达到设置上线），刷新缓冲页
  4. 两种Checkpoint
    - Sharp Checkpoint。在数据库关闭时将所有脏页刷新到磁盘
    - FuzzyCheckpoint。
      - Master Thead Checkpoint。每秒或每10秒从缓冲池的脏页列表中刷新一定比例数据到磁盘，该过程为异步
      - FLUSH_LRU_LIST Checkpoint。当LRU List中的数量达到上线，LRU List末端页被移除，若其中有脏页，需要进行Checkpoint。在InnoDB5.6版本开始，采用Page Cleaner线程异步进行
      - Async/Sync Flush Checkpoint。重做日志文件不可用的情况下执行，保证重做日志的循环使用。5.6版本后通过Page Clearner 线程中异步执行
      - Dirty Page too much Checkpoint 。脏页数据太多执行Checkpoint,默认达到最大值的75%会执行
    
